services:
  postgres:
    image: postgres:16  # 사용할 이미지: PostgreSQL 16 버전
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"  # 컨테이너의 포트 5432를 호스트와 연결
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - cryptoflow-network

# Airflow Webserver 설정
  airflow-webserver:
    build: ./airflow_setup
    container_name: aifrlow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    ports:
      - "8081:8080" # airflow UI port
      - "8888:8888" # Jupyter Notebook port (running on airflow docker) 
    volumes:
      - ./airflow_home/dags:/opt/airflow/dags
      - ./airflow_home/logs:/opt/airflow/logs
      - ./airflow_home/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    command: webserver
    networks:
      - cryptoflow-network

  # Airflow Scheduler 설정
  airflow-scheduler:
    build: ./airflow_setup
    container_name: airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    volumes:
      - ./airflow_home/dags:/opt/airflow/dags
      - ./airflow_home/logs:/opt/airflow/logs
      - ./airflow_home/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    command: scheduler
    networks:
    - cryptoflow-network
  
  # Airflow 초기화 (DB 스키마 업그레이드 및 사용자 생성)
  airflow-init:
    build: ./airflow_setup
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db upgrade
        airflow users create \
          --username admin \
          --firstname admin \
          --lastname admin \
          --role Admin \
          --email admin@example.com \
          --password admin || true
    depends_on:
      - postgres
    networks:
    - cryptoflow-network
  
  # 실시간 데이터 파이프라인 (Hot Path)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cryptoflow-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "upbit-trades:1:1,upbit-tickers:1:1,upbit-orderbooks:1:1"
    networks:
      - cryptoflow-network
    healthcheck: # Kafka 서비스가 실제로 연결을 받을 준비가 완료될 때까지 기다려야 함
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - cryptoflow-network

  stream-app:
    build: .
    container_name: stream-app
    restart: on-failure
    depends_on:
      kafka: # kafka와 redis를 객체 형태로 변경
        condition: service_healthy
      redis:
        condition: service_started # redis는 healthcheck가 없으므로 started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:29092'
      REDIS_HOST: 'redis'
    volumes:
      - ./streaming:/app/streaming
      - ./shared:/app/shared
    networks:
      - cryptoflow-network
    
# Django API 서버 (Serving Layer)
  django-app:
    build:
      context: .
      dockerfile: Dockerfile.django  # Django용 Dockerfile 지정
    container_name: django-app
    restart: on-failure
    depends_on:
      # kafka: # kafka와 redis를 객체 형태로 변경
      #   condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started # redis는 healthcheck가 없으므로 started
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./crypto_flow_django:/app/crypto_flow_django
    ports:
      - "8000:8000"
    environment:
      # Django가 Redis, Postgres에 접속하기 위한 환경 변수
      REDIS_HOST: 'redis'
      POSTGRES_HOST: 'postgres'
      # .env 파일의 변수들을 그대로 전달
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - cryptoflow-network
  
  # Celery Worker (비동기 작업 처리)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.django  # Django와 동일한 환경 사용
    container_name: celery-worker
    command: celery -A django_setup worker --loglevel=info
    volumes:
      - ./crypto_flow_django:/app/crypto_flow_django # Django 코드 접근
    environment:
      # Django 및 Redis, Postgres 접속 정보 (django-app과 동일)
      DJANGO_SETTINGS_MODULE: 'django_setup.settings' # 명시적으로 설정
      REDIS_HOST: 'redis'
      POSTGRES_HOST: 'postgres'
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - redis
      - postgres
      - django-app
    networks:
      - cryptoflow-network
    restart: on-failure # 에러 발생 시 재시작
  
  # Celery Beat (주기적 작업 스케줄러)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.django # Worker와 동일한 환경 사용
    container_name: celery-beat
    command: celery -A django_setup beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./crypto_flow_django:/app/crypto_flow_django
    environment:
      # Worker와 동일한 환경 변수 설정
      DJANGO_SETTINGS_MODULE: 'django_setup.settings'
      REDIS_HOST: 'redis'
      POSTGRES_HOST: 'postgres'
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - redis
      - postgres
      - django-app
    networks:
      - cryptoflow-network
    restart: on-failure

# 사용할 Docker 볼륨 정의
volumes:
  postgres-data:

# 서비스들이 사용할 공용 네트워크 정의
networks:
  cryptoflow-network:
    driver: bridge
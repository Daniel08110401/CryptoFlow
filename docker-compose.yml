version: '3.8'
services:
  postgres:
    image: postgres:16  # 사용할 이미지: PostgreSQL 16 버전
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"  # 컨테이너의 포트 5432를 호스트와 연결
    volumes:
      - postgres-data:/var/lib/postgresql/data

# Airflow Webserver 설정
  airflow-webserver:
    image: apache/airflow:2.7.0
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ./airflow_home/dags:/opt/airflow/dags
      - ./airflow_home/logs:/opt/airflow/logs
      - ./airflow_home/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres

  # Airflow Scheduler 설정
  airflow-scheduler:
    image: apache/airflow:2.7.0
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    volumes:
      - ./airflow_home/dags:/opt/airflow/dags
      - ./airflow_home/logs:/opt/airflow/logs
      - ./airflow_home/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
  
  # Airflow 초기화 (DB 스키마 업그레이드 및 사용자 생성)
  airflow-init:
    image: apache/airflow:2.7.0
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db upgrade
        airflow users create \
          --username admin \
          --firstname admin \
          --lastname admin \
          --role Admin \
          --email admin@example.com \
          --password admin || true
    depends_on:
      - postgres
  
  # --- 실시간 데이터 파이프라인 (Hot Path) ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cryptoflow-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "upbit-trades:1:1,upbit-tickers:1:1,upbit-orderbooks:1:1"
    networks:
      - cryptoflow-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - cryptoflow-network

  stream-app:
    build: .
    container_name: stream-app
    depends_on:
      - kafka
      - redis
    environment:
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:29092'
      REDIS_HOST: 'redis'
    volumes:
      - ./streaming:/app/streaming
      - ./shared:/app/shared
    networks:
      - cryptoflow-network

# 사용할 Docker 볼륨 정의
volumes:
  postgres-data:

# 서비스들이 사용할 공용 네트워크 정의
networks:
  cryptoflow-network:
    driver: bridge